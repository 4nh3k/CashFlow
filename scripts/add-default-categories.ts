#!/usr/bin/env node

/**
 * Default Categories Migration Script
 * 
 * Adds comprehensive default categories for Vietnamese users
 * with proper icons, colors, and localization
 */

import { config } from 'dotenv'
import { resolve } from 'path'
import { MongoClient, Db } from 'mongodb'
import { COLLECTIONS } from '../lib/database/schema'

// Load environment variables
config({ path: resolve(process.cwd(), '.env.local') })

if (!process.env.MONGODB_URI) {
  console.error('‚ùå MONGODB_URI not found in environment variables')
  console.log('Please make sure .env.local file exists with MONGODB_URI set')
  process.exit(1)
}

// ============================================================================
// DEFAULT CATEGORIES DATA
// ============================================================================

const defaultCategories = [
  // EXPENSE CATEGORIES
  {
    name: 'ƒÇn u·ªëng',
    englishName: 'Food & Drinks',
    defaultType: 'expense' as const,
    icon: 'üçΩÔ∏è',
    color: '#FF6B6B',
    isDefault: true,
    description: 'C√°c chi ph√≠ ƒÉn u·ªëng, c√† ph√™, nh√† h√†ng',
    keywords: ['c∆°m', 'ph·ªü', 'c√† ph√™', 'coffee', 'tr√† s·ªØa', 'b√°nh m√¨', 'nh√† h√†ng', 'qu√°n ƒÉn']
  },
  {
    name: 'Di chuy·ªÉn',
    englishName: 'Transportation',
    defaultType: 'expense' as const,
    icon: 'üöó',
    color: '#4ECDC4',
    isDefault: true,
    description: 'Xe bus, taxi, xƒÉng xe, b·∫£o d∆∞·ª°ng xe',
    keywords: ['xe bus', 'taxi', 'grab', 'xƒÉng', 'xe m√°y', '√¥ t√¥', 'b·∫£o d∆∞·ª°ng']
  },
  {
    name: 'Mua s·∫Øm',
    englishName: 'Shopping',
    defaultType: 'expense' as const,
    icon: 'üõçÔ∏è',
    color: '#45B7D1',
    isDefault: true,
    description: 'Qu·∫ßn √°o, gi√†y d√©p, ph·ª• ki·ªán',
    keywords: ['√°o', 'qu·∫ßn', 'gi√†y', 't√∫i', 'ƒë·ªì d√πng', 'mua s·∫Øm', 'shopping']
  },
  {
    name: 'Nh√† ·ªü',
    englishName: 'Housing',
    defaultType: 'expense' as const,
    icon: 'üè†',
    color: '#96CEB4',
    isDefault: true,
    description: 'Ti·ªÅn thu√™ nh√†, ƒëi·ªán n∆∞·ªõc, internet',
    keywords: ['thu√™ nh√†', 'ƒëi·ªán', 'n∆∞·ªõc', 'internet', 'wifi', 'gas', 'nh√† ·ªü']
  },
  {
    name: 'Y t·∫ø',
    englishName: 'Healthcare',
    defaultType: 'expense' as const,
    icon: '‚öïÔ∏è',
    color: '#FFA07A',
    isDefault: true,
    description: 'Kh√°m b·ªánh, thu·ªëc men, b·∫£o hi·ªÉm y t·∫ø',
    keywords: ['b·ªánh vi·ªán', 'thu·ªëc', 'kh√°m b·ªánh', 'y t·∫ø', 'b√°c sƒ©', 'rƒÉng']
  },
  {
    name: 'Gi√°o d·ª•c',
    englishName: 'Education',
    defaultType: 'expense' as const,
    icon: 'üìö',
    color: '#DDA0DD',
    isDefault: true,
    description: 'H·ªçc ph√≠, s√°ch v·ªü, kh√≥a h·ªçc',
    keywords: ['h·ªçc ph√≠', 's√°ch', 'kh√≥a h·ªçc', 'h·ªçc', 'gi√°o d·ª•c', 'tr∆∞·ªùng']
  },
  {
    name: 'Gi·∫£i tr√≠',
    englishName: 'Entertainment',
    defaultType: 'expense' as const,
    icon: 'üé¨',
    color: '#FFB347',
    isDefault: true,
    description: 'Phim ·∫£nh, game, du l·ªãch, th·ªÉ thao',
    keywords: ['phim', 'game', 'du l·ªãch', 'th·ªÉ thao', 'gi·∫£i tr√≠', 'r·∫°p chi·∫øu']
  },
  {
    name: 'Vi·ªÖn th√¥ng',
    englishName: 'Communication',
    defaultType: 'expense' as const,
    icon: 'üì±',
    color: '#87CEEB',
    isDefault: true,
    description: 'ƒêi·ªán tho·∫°i, data, internet di ƒë·ªông',
    keywords: ['ƒëi·ªán tho·∫°i', 'data', '3G', '4G', '5G', 'vi·ªÖn th√¥ng', 'sim']
  },
  {
    name: 'L√†m ƒë·∫πp',
    englishName: 'Beauty & Personal Care',
    defaultType: 'expense' as const,
    icon: 'üíÑ',
    color: '#F0A0C9',
    isDefault: true,
    description: 'M·ªπ ph·∫©m, c·∫Øt t√≥c, spa, chƒÉm s√≥c c√° nh√¢n',
    keywords: ['m·ªπ ph·∫©m', 'c·∫Øt t√≥c', 'spa', 'l√†m ƒë·∫πp', 'chƒÉm s√≥c']
  },
  {
    name: 'ƒê·∫ßu t∆∞',
    englishName: 'Investment',
    defaultType: 'expense' as const,
    icon: 'üìà',
    color: '#9370DB',
    isDefault: true,
    description: 'C·ªï phi·∫øu, qu·ªπ ƒë·∫ßu t∆∞, ti·∫øt ki·ªám',
    keywords: ['c·ªï phi·∫øu', 'ƒë·∫ßu t∆∞', 'qu·ªπ', 'ti·∫øt ki·ªám', 'ch·ª©ng kho√°n']
  },
  {
    name: 'Kh√°c',
    englishName: 'Other Expenses',
    defaultType: 'expense' as const,
    icon: 'üí∏',
    color: '#C0C0C0',
    isDefault: true,
    description: 'Chi ph√≠ kh√°c kh√¥ng thu·ªôc danh m·ª•c n√†o',
    keywords: ['kh√°c', 'other', 'misc', 'linh tinh']
  },

  // INCOME CATEGORIES
  {
    name: 'L∆∞∆°ng',
    englishName: 'Salary',
    defaultType: 'income' as const,
    icon: 'üí∞',
    color: '#32CD32',
    isDefault: true,
    description: 'L∆∞∆°ng ch√≠nh th·ª©c t·ª´ c√¥ng ty',
    keywords: ['l∆∞∆°ng', 'salary', 'ti·ªÅn l∆∞∆°ng', 'c√¥ng ty']
  },
  {
    name: 'Freelance',
    englishName: 'Freelance',
    defaultType: 'income' as const,
    icon: 'üíº',
    color: '#20B2AA',
    isDefault: true,
    description: 'Thu nh·∫≠p t·ª´ vi·ªác l√†m t·ª± do',
    keywords: ['freelance', 't·ª± do', 'part-time', 'project']
  },
  {
    name: 'Kinh doanh',
    englishName: 'Business',
    defaultType: 'income' as const,
    icon: 'üè™',
    color: '#FFD700',
    isDefault: true,
    description: 'Thu nh·∫≠p t·ª´ kinh doanh, b√°n h√†ng',
    keywords: ['kinh doanh', 'b√°n h√†ng', 'business', 'shop']
  },
  {
    name: 'ƒê·∫ßu t∆∞',
    englishName: 'Investment Income',
    defaultType: 'income' as const,
    icon: 'üìä',
    color: '#4169E1',
    isDefault: true,
    description: 'L·ª£i nhu·∫≠n t·ª´ ƒë·∫ßu t∆∞, c·ªï t·ª©c',
    keywords: ['l·ª£i nhu·∫≠n', 'c·ªï t·ª©c', 'dividend', 'profit', 'ƒë·∫ßu t∆∞']
  },
  {
    name: 'Qu√† t·∫∑ng',
    englishName: 'Gifts',
    defaultType: 'income' as const,
    icon: 'üéÅ',
    color: '#FF69B4',
    isDefault: true,
    description: 'Ti·ªÅn qu√†, ti·ªÅn m·ª´ng, h·ªó tr·ª£ t·ª´ gia ƒë√¨nh',
    keywords: ['qu√†', 'gift', 'm·ª´ng', 'gia ƒë√¨nh', 'h·ªó tr·ª£']
  },
  {
    name: 'Kh√°c',
    englishName: 'Other Income',
    defaultType: 'income' as const,
    icon: 'üíé',
    color: '#40E0D0',
    isDefault: true,
    description: 'Thu nh·∫≠p kh√°c kh√¥ng thu·ªôc danh m·ª•c n√†o',
    keywords: ['kh√°c', 'other', 'misc', 'linh tinh']
  }
]

// ============================================================================
// MIGRATION FUNCTIONS
// ============================================================================

async function connectToDatabase(): Promise<{ client: MongoClient; db: Db }> {
  const client = new MongoClient(process.env.MONGODB_URI!, {
    retryWrites: true,
  })
  
  await client.connect()
  const db = client.db(process.env.DATABASE_NAME || 'personal-finance')
  
  console.log('‚úÖ Connected to MongoDB')
  return { client, db }
}

async function checkExistingCategories(db: Db): Promise<string[]> {
  const collection = db.collection(COLLECTIONS.CATEGORIES)
  const existingCategories = await collection.find({ isDefault: true }).toArray()
  
  console.log(`üìã Found ${existingCategories.length} existing default categories`)
  
  return existingCategories.map(cat => cat.name)
}

async function addDefaultCategories(db: Db): Promise<void> {
  const collection = db.collection(COLLECTIONS.CATEGORIES)
  const existingNames = await checkExistingCategories(db)
  
  // Filter out categories that already exist
  const categoriesToAdd = defaultCategories.filter(
    category => !existingNames.includes(category.name)
  )
  
  if (categoriesToAdd.length === 0) {
    console.log('‚ÑπÔ∏è All default categories already exist')
    return
  }
  
  console.log(`üîÑ Adding ${categoriesToAdd.length} new default categories...`)
  
  // Prepare categories for insertion
  const categoriesWithDates = categoriesToAdd.map(category => ({
    ...category,
    id: `cat_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    createdAt: new Date(),
    updatedAt: new Date(),
  }))
  
  // Insert categories
  const result = await collection.insertMany(categoriesWithDates)
  
  console.log(`‚úÖ Successfully added ${result.insertedCount} default categories`)
  
  // Log added categories
  categoriesWithDates.forEach(category => {
    console.log(`   ‚Ä¢ ${category.icon} ${category.name} (${category.englishName})`)
  })
}

async function createKeywordMappings(db: Db): Promise<void> {
  const categoriesCollection = db.collection(COLLECTIONS.CATEGORIES)
  const keywordCollection = db.collection(COLLECTIONS.KEYWORD_MAPPINGS)
  
  console.log('üîÑ Creating keyword mappings for categories...')
  
  // Get all categories with keywords
  const categories = await categoriesCollection.find({ 
    isDefault: true,
    keywords: { $exists: true, $ne: [] }
  }).toArray()
  
  let mappingsAdded = 0
  
  for (const category of categories) {
    if (!category.keywords || category.keywords.length === 0) continue
    
    for (const keyword of category.keywords) {
      // Check if mapping already exists
      const existingMapping = await keywordCollection.findOne({
        keyword: keyword.toLowerCase(),
        categoryId: category.id
      })
      
      if (!existingMapping) {
        await keywordCollection.insertOne({
          id: `km_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
          keyword: keyword.toLowerCase(),
          categoryId: category.id,
          confidence: 0.8,
          frequency: 1,
          createdAt: new Date(),
          updatedAt: new Date(),
        })
        mappingsAdded++
      }
    }
  }
  
  console.log(`‚úÖ Created ${mappingsAdded} keyword mappings`)
}

async function validateMigration(db: Db): Promise<void> {
  console.log('üîç Validating migration...')
  
  const categoriesCollection = db.collection(COLLECTIONS.CATEGORIES)
  const keywordCollection = db.collection(COLLECTIONS.KEYWORD_MAPPINGS)
  
  // Count categories by type
  const expenseCount = await categoriesCollection.countDocuments({ 
    isDefault: true, 
    defaultType: 'expense' 
  })
  const incomeCount = await categoriesCollection.countDocuments({ 
    isDefault: true, 
    defaultType: 'income' 
  })
  const totalKeywords = await keywordCollection.countDocuments()
  
  console.log(`‚úÖ Validation Results:`)
  console.log(`   ‚Ä¢ Default expense categories: ${expenseCount}`)
  console.log(`   ‚Ä¢ Default income categories: ${incomeCount}`)
  console.log(`   ‚Ä¢ Total keyword mappings: ${totalKeywords}`)
  
  if (expenseCount === 0 || incomeCount === 0) {
    throw new Error('Migration validation failed: Missing categories')
  }
}

// ============================================================================
// MAIN MIGRATION FUNCTION
// ============================================================================

async function runDefaultCategoriesMigration(): Promise<void> {
  let client: MongoClient | null = null
  
  try {
    console.log('üöÄ Starting Default Categories Migration')
    console.log('=====================================')
    console.log(`üìÖ Date: ${new Date().toLocaleString('vi-VN')}`)
    console.log(`üóÑÔ∏è Database: ${process.env.DATABASE_NAME || 'personal-finance'}`)
    console.log('')
    
    // Connect to database
    const connection = await connectToDatabase()
    client = connection.client
    const db = connection.db
    
    // Run migration steps
    await addDefaultCategories(db)
    await createKeywordMappings(db)
    await validateMigration(db)
    
    console.log('')
    console.log('üéâ Default Categories Migration Completed Successfully!')
    console.log('=====================================================')
    console.log('')
    console.log('üìù Summary:')
    console.log('   ‚Ä¢ Added comprehensive Vietnamese category system')
    console.log('   ‚Ä¢ Created keyword mappings for smart categorization')
    console.log('   ‚Ä¢ Included both expense and income categories')
    console.log('   ‚Ä¢ Added icons and colors for better UI experience')
    console.log('')
    console.log('üéØ Next Steps:')
    console.log('   1. Restart your application to see new categories')
    console.log('   2. Test transaction categorization with keywords')
    console.log('   3. Customize categories as needed for your users')
    console.log('')
    
  } catch (error) {
    console.error('')
    console.error('‚ùå Migration Failed')
    console.error('==================')
    console.error('Error:', error)
    console.error('')
    process.exit(1)
  } finally {
    if (client) {
      await client.close()
      console.log('‚úÖ Disconnected from MongoDB')
    }
  }
}

// ============================================================================
// CLI EXECUTION
// ============================================================================

if (require.main === module) {
  runDefaultCategoriesMigration()
    .then(() => {
      console.log('‚ú® Migration completed successfully!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('üí• Migration failed:', error)
      process.exit(1)
    })
}

export { runDefaultCategoriesMigration, defaultCategories }
